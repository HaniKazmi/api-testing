#%RATML
 
title: Onyx API
baseUri: http://localhost:3000/api/v1
version: v1
/users:
  get:
    responses:
      200:
        body:
          application/json:
            schema: |
              { "$schema": "http://json-schema.org/schema",
                "type": "object",
                "description": "A list of users",
                "properties": [{
                  "name": { "type": "string"},
                  "uri": { "type": "uri"},
                  "role": { "type": "string" }
                }],
                "required": [ "name", "uri", "role" ]
              }
    testcases:
      userindex:
        response: 
          status: 200
          body: |
            [{
              "name": "Hani",
              "uri": "/users/1",
              "role": "admin"
            } ,
            {
              "name": "Newton",
              "uri": "/users/2",
              "role": "User"
              } 
            ]
  post:
    responses:
      200:
        body:
          application/json:
            schema: |
              { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "description": "A list of users",
                  "properties": {
                    "name": { "type": "string"},
                    "uri": { "type": "uri"},
                    "role": { "type": "string" }
                  },
                  "required": [ "name", "uri", "role" ]
              }
    testcases:
      createuser:
        dependent: userindex
        query: |
          { "name": "Alan Turing",
            "photo": "/photos/2131",
            "role": "admin"
          }
        response: 
          status: 200
          body: |
            { "name": "Alan Turing",
              "uri" : "/users/3",
               "role": "admin"
            }
  /{userId}:
    get:
      responses:
        200:
          body:
            application/json:
              schema: |
                { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "description": "A canonical user",
                  "properties": {
                    "name":  { "type": "string" },
                    "uri": { "type": "uri" },
                    "photo": { "type": "uri" },
                    "files": [{
                      "filename": { "type": "string"},
                      "uri": { "type": "uri"}
                      }]
                  },
                  "required": [ "name", "uri" ]
                }
        404:
          body:
            application/json:
              schema: |
                { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "description": "A missing user",
                  "properties": {
                    "error":  { "type": "string" }
                  },
                  "required": [ "message" ]
                }
      testcases:
        exampleadminuser:
          resource: 1
          response:
            status: 200
            body: |
                {
                  "name": "Hani",
                  "uri": "/users/1",
                  "photo": "/photos/121",
                  "files":[ 
                    {
                      "filename": "photo.jpg",
                      "uri": "/files/1"
                    },  
                    {
                      "filename": "movie.exe",
                      "uri": "/files/2"
                    }  
                  ]
                }
        exampleuser:
          resource: 2
          response:
            status: 200
            body: |
              {
                "name": "Newton",
                "uri": "/users/2",
                "photo": "/photos/21",
                "files":[ 
                  {
                    "filename": "game.mp4",
                    "uri": "/files/3"
                  },  
                  {
                    "filename": "kcl.txt",
                    "uri": "/files/4"
                  }  
                ]
              }
        missinguser:
          resource: 2121
          dependent: exampleuser
          response:
            status: 404
            body: |
              { "error" : "not_found"}
    delete:
      description: |
        This method will *delete* an **individual user**
      responses:
        200:
          body:
            application/json:
              schema: |
                { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" }
                  },
                  "required": [ "message" ]
                }
/files:
  get:
    responses:
      200:
        body:
          application/json:
            schema: |
               { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "description": "A list of files",
                  "properties": [{
                    "filename": { "type": "string"},
                    "uri": { "type": "uri"},
                    "size": { "type": "long" }
                  }],
                  "required": [ "filename", "uri" ]
                }
    testcases:
      filesindex:
        response:
          status: 200
          body: |
            [{
                "filename": "photo.jpg",
                "uri": "/files/1",
                "size": 12
            } ,
            {
                "filename": "movie.exe",
                "uri": "/files/2",
                "size": 194320
            } ,
            {
                "filename": "game.mp4",
                "uri": "/files/3",
                "size": 1
            } ,
            {
                "filename": "kcl.txt",
                "uri": "/files/4",
                "size": 432
            } 
            ]
  /{fileId}:
    get:
      responses:
        200:
          body:
            application/json:
              schema: |
                { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "description": "A canonical file",
                  "properties": {
                    "filename":  { "type": "string" },
                    "uri": { "type": "uri" },
                    "location": { "type": "uri" },
                    "size": { "type": "long" }
                  },
                  "required": [ "filename", "location" ]
                }
        404:
          body:
            application/json:
              schema: |
                { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "description": "A missing file",
                  "properties": {
                    "error":  { "type": "string" }
                  },
                  "required": [ "message" ]
                }
      testcases:
        basicfile:
          resource: 1
          response:
            status: 200
            body: |
              {
                  "filename": "photo.jpg",
                  "uri": "/files/1",
                  "location": "/resource/12123",
                  "size": "12"
              }
        deletedfile:
          resource: 1
          dependent: deletefile
          response:
            status: 404
            body: |
              { "error" : "not_found"}
    delete:
      description: |
        This method will *delete* an **individual file**
      responses:
        200:
          body:
            application/json:
              schema: |
                { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "properties": {
                    "message":  { "type": "string" }
                  },
                  "required": [ "message" ]
                }
      testcases:
        deletefile:
          resource: 1
          dependent: basicfile
          response:
            status: 200
            body: |
              { "message": "File deleted"}