#%RATML
 
title: Onyx API
baseUri: http://localhost:3000/api/v1
version: v1
/users:
  get:
    responses:
      200:
        body:
          application/json:
            schema: |
              { "$schema": "http://json-schema.org/schema",
                "type": "object",
                "description": "A list of users",
                "properties": [{
                  "name": { "type": "string"},
                  "uri": { "type": "uri"},
                  "role": { "type": "string" }
                }],
                "required": [ "name", "uri", "role" ]
              }
  post:
    responses:
      200:
        body:
          application/json:
            schema: |
              { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "description": "A list of users",
                  "properties": {
                    "name": { "type": "string"},
                    "uri": { "type": "uri"},
                    "role": { "type": "string" }
                  },
                  "required": [ "name", "uri", "role" ]
              }
    testcases:
      createuser:
        query: |
          { "name": "Alan Turing",
            "photo": "/photos/2131"
          }
        response: 
          status: 200
          body: |
            { "name": "Alan Turing",
              "uri" : "/users/3",
               "role": ""
            }
  /{userId}:
    get:
      responses:
        200:
          body:
            application/json:
              schema: |
                { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "description": "A canonical user",
                  "properties": {
                    "name":  { "type": "string" },
                    "uri": { "type": "uri" },
                    "photo": { "type": "uri" },
                    "files": [{
                      "filename": { "type": "string"},
                      "uri": { "type": "uri"}
                      }]
                  },
                  "required": [ "name", "uri" ]
                }
        400:
          body:
            application/json:
              schema: |
                { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "description": "A missing user",
                  "properties": {
                    "error":  { "type": "string" }
                  },
                  "required": [ "message" ]
                }
      testcases:
        exampleuser:
          resource: 1
          response:
            status: 200
            body: |
              { "name": "Hani",
                "uri": "/users/1",
                "photo": "/photos/121",
                "files":[ 
                  {
                    "filename": "Test",
                    "uri": "/files/1"
                  },  
                  {
                    "filename": "Test2",
                    "uri": "/files/2"
                  }]
              }
        missinguser:
          resource: 2121
          dependent: exampleuser
          response:
            status: 200
            body: |
              { "error" : "not_found"}
    delete:
      description: |
        This method will *delete* an **individual user**
      responses:
        200:
          body:
            application/json:
              schema: |
                { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" }
                  },
                  "required": [ "message" ]
                }
/files:
  get:
    responses:
      200:
        body:
          application/json:
            schema: |
               { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "description": "A list of files",
                  "properties": [{
                    "filename": { "type": "string"},
                    "uri": { "type": "uri"},
                    "size": { "type": "long" }
                  }],
                  "required": [ "filename", "uri" ]
                }
  /{fileId}:
    get:
      responses:
        200:
          body:
            application/json:
              schema: |
                { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "description": "A canonical file",
                  "properties": {
                    "filename":  { "type": "string" },
                    "uri": { "type": "uri" },
                    "location": { "type": "uri" },
                    "size": { "type": "long" }
                  },
                  "required": [ "filename", "location" ]
                }
        404:
          body:
            application/json:
              schema: |
                { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "description": "A missing file",
                  "properties": {
                    "error":  { "type": "string" }
                  },
                  "required": [ "message" ]
                }
    delete:
      description: |
        This method will *delete* an **individual file**
      responses:
        200:
          body:
            application/json:
              schema: |
                { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "properties": {
                    "message":  { "type": "string" }
                  },
                  "required": [ "message" ]
                }